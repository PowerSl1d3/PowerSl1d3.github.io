<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>$&gt;swift build blog</title><description>Блог про iOS разработку и не только</description><link>https://build-swift-blog.com</link><language>ru</language><lastBuildDate>Fri, 14 Jun 2024 17:31:58 +1000</lastBuildDate><pubDate>Fri, 14 Jun 2024 17:31:58 +1000</pubDate><ttl>250</ttl><atom:link href="https://build-swift-blog.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://build-swift-blog.com/articles/meet-async-await</guid><title>WWDC21. Meet async-await.</title><description>Описание моей первой статьи.</description><link>https://build-swift-blog.com/articles/meet-async-await</link><pubDate>Fri, 14 Jun 2024 00:00:00 +1000</pubDate><content:encoded><![CDATA[<h1>WWDC21. Meet async-await.</h1><p>Какие то из этих шагов выполняются быстро (<code>thumbnailURLRequest</code>, <code>UIImage(data:)</code>), а какие-то медленно (<code>dataTask(with:completion:)</code>, <code>prepareThumbnail(of:completionHandler)</code>).</p><p>Сама функция на <code>completionHandler</code>-ах выглядит следующим образом:</p><pre><code><span class="keyword">func</span> fetchThumbnail(for id: <span class="type">String</span>, completion: <span class="keyword">@escaping</span> (<span class="type">UIImage</span>?, <span class="type">Error</span>?) -&gt; <span class="type">Void</span>) {
    <span class="keyword">let</span> request = <span class="call">thumbnailURLRequest</span>(for: id)
    <span class="keyword">let</span> task = <span class="type">URLSession</span>.<span class="property">shared</span>.<span class="call">dataTask</span>(with: request) { data, response, error <span class="keyword">in
        if let</span> error = error {
            <span class="call">completion</span>(<span class="keyword">nil</span>, error)
        } <span class="keyword">else if</span> (response <span class="keyword">as</span>? <span class="type">HTTPURLResponse</span>)?.<span class="property">statusCode</span> != <span class="number">200</span> {
            <span class="call">completion</span>(<span class="keyword">nil</span>, <span class="type">FetchError</span>.<span class="property">badID</span>)
        } <span class="keyword">else</span> {
            <span class="keyword">guard let</span> image = <span class="type">UIImage</span>(data: data!) <span class="keyword">else</span> {
                <span class="call">completion</span>(<span class="keyword">nil</span>, <span class="type">FetchError</span>.<span class="property">badImage</span>)
                <span class="keyword">return</span>
            }
            image.<span class="call">prepareThumbnail</span>(of: <span class="type">CGSize</span>(width: <span class="number">40</span>, height: <span class="number">40</span>)) { thumbnail <span class="keyword">in
                guard let</span> thumbnail = thumbnail <span class="keyword">else</span> {
                    <span class="call">completion</span>(<span class="keyword">nil</span>, <span class="type">FetchError</span>.<span class="property">badImage</span>)
                    <span class="keyword">return</span>
                }
                <span class="call">completion</span>(thumbnail, <span class="keyword">nil</span>)
            }
        }
    }
    task.<span class="call">resume</span>()
}
</code></pre>]]></content:encoded></item></channel></rss>